{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/alejandrodelarosaofficial-ia/Analise_dados_pousada/blob/main/Analise_dados_Pousada.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install streamlit"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sTzeyMzPhwTx",
        "outputId": "8c2c91b9-c8ea-4e78-a15f-d20f85c3fff9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting streamlit\n",
            "  Downloading streamlit-1.50.0-py3-none-any.whl.metadata (9.5 kB)\n",
            "Requirement already satisfied: altair!=5.4.0,!=5.4.1,<6,>=4.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (5.5.0)\n",
            "Requirement already satisfied: blinker<2,>=1.5.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (1.9.0)\n",
            "Requirement already satisfied: cachetools<7,>=4.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (5.5.2)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (8.2.1)\n",
            "Requirement already satisfied: numpy<3,>=1.23 in /usr/local/lib/python3.12/dist-packages (from streamlit) (2.0.2)\n",
            "Requirement already satisfied: packaging<26,>=20 in /usr/local/lib/python3.12/dist-packages (from streamlit) (25.0)\n",
            "Requirement already satisfied: pandas<3,>=1.4.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (2.2.2)\n",
            "Requirement already satisfied: pillow<12,>=7.1.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (11.3.0)\n",
            "Requirement already satisfied: protobuf<7,>=3.20 in /usr/local/lib/python3.12/dist-packages (from streamlit) (5.29.5)\n",
            "Requirement already satisfied: pyarrow>=7.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (18.1.0)\n",
            "Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.12/dist-packages (from streamlit) (2.32.4)\n",
            "Requirement already satisfied: tenacity<10,>=8.1.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (8.5.0)\n",
            "Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.12/dist-packages (from streamlit) (0.10.2)\n",
            "Requirement already satisfied: typing-extensions<5,>=4.4.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (4.15.0)\n",
            "Requirement already satisfied: watchdog<7,>=2.1.5 in /usr/local/lib/python3.12/dist-packages (from streamlit) (6.0.0)\n",
            "Requirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /usr/local/lib/python3.12/dist-packages (from streamlit) (3.1.45)\n",
            "Collecting pydeck<1,>=0.8.0b4 (from streamlit)\n",
            "  Downloading pydeck-0.9.1-py2.py3-none-any.whl.metadata (4.1 kB)\n",
            "Requirement already satisfied: tornado!=6.5.0,<7,>=6.0.3 in /usr/local/lib/python3.12/dist-packages (from streamlit) (6.4.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.12/dist-packages (from altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (3.1.6)\n",
            "Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.12/dist-packages (from altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (4.25.1)\n",
            "Requirement already satisfied: narwhals>=1.14.2 in /usr/local/lib/python3.12/dist-packages (from altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (2.5.0)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.12/dist-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.12)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.12/dist-packages (from pandas<3,>=1.4.0->streamlit) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.12/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.12/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n",
            "Requirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.12/dist-packages (from requests<3,>=2.27->streamlit) (3.4.3)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.12/dist-packages (from requests<3,>=2.27->streamlit) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.12/dist-packages (from requests<3,>=2.27->streamlit) (2.5.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.12/dist-packages (from requests<3,>=2.27->streamlit) (2025.8.3)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.12/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.12/dist-packages (from jinja2->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (3.0.2)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.12/dist-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (25.3.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.12/dist-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (2025.9.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.12/dist-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (0.36.2)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.12/dist-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (0.27.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.12/dist-packages (from python-dateutil>=2.8.2->pandas<3,>=1.4.0->streamlit) (1.17.0)\n",
            "Downloading streamlit-1.50.0-py3-none-any.whl (10.1 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m10.1/10.1 MB\u001b[0m \u001b[31m32.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading pydeck-0.9.1-py2.py3-none-any.whl (6.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.9/6.9 MB\u001b[0m \u001b[31m65.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: pydeck, streamlit\n",
            "Successfully installed pydeck-0.9.1 streamlit-1.50.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WFiTQmW4GqZh"
      },
      "outputs": [],
      "source": [
        "# Importando bibliotecas\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iS-RbTsJFLXR",
        "outputId": "693dbb38-ca17-4395-f371-c930faa5edbb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import streamlit as st"
      ],
      "metadata": {
        "id": "lT3NJePIDuEi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Analise Descritiva"
      ],
      "metadata": {
        "id": "Op3hnWDqUpVQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Importar tabela para Analise de dados\n",
        "Relatorio = pd.read_excel('/content/drive/MyDrive/BD_Reservas.xlsx')\n",
        "# Ver a tabela\n",
        "Relatorio.head()"
      ],
      "metadata": {
        "id": "iIvW1wKQG0ja",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 417
        },
        "outputId": "0507c570-0f64-417b-df05-d4d189500e8c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   ID_reserva    Canal                       Titular CPF/CNPJ/OUTRO  \\\n",
              "0         NaN    HBOOK                 TESTE HSYSTEM            NaN   \n",
              "1      2029.0  BOOKING               fabiola dirksen            NaN   \n",
              "2      2030.0  BOOKING  Rafael Ribeiro Gubitoso Ap 6            NaN   \n",
              "3      2031.0   Direto               Dino Junior 10B    58443835915   \n",
              "4      2028.0   Direto                Caique Peixoto    04316318160   \n",
              "\n",
              "       Telefone  Data da Reserva   Check-in  Check-out  Nº Adultos  \\\n",
              "0            123      2022-02-11 2022-02-11 2022-02-12           2   \n",
              "1  5547999780008      2025-08-30 2025-08-30 2025-08-31           2   \n",
              "2  5555932815574      2025-08-29 2025-08-30 2025-09-01           2   \n",
              "3     4192364000      2025-08-29 2025-08-29 2025-09-01           2   \n",
              "4   556196818360      2025-08-27 2025-08-29 2025-08-30           8   \n",
              "\n",
              "   Nº Crianças  Idade Crianças Status da reserva               Tipo de quarto  \\\n",
              "0            0             NaN         Cancelado                   Twin Suite   \n",
              "1            0             NaN              Novo      Apartamento com Cozinha   \n",
              "2            0             NaN              Novo      Apartamento sem Cozinha   \n",
              "3            0             NaN              Novo  10B Apartamento com cozinha   \n",
              "4            0             NaN              Novo          Ap 12 / 02 / 03/ 04   \n",
              "\n",
              "   Quantidade diarias    Valor  Comissão Status do pagamento   \\\n",
              "0                    1  250.00      0.00                  NaN   \n",
              "1                    1  197.84     25.72                 Pago   \n",
              "2                    2  395.68     51.44                 pago   \n",
              "3                    3    1.00      0.00                 Pago   \n",
              "4                    1  880.00      0.00                 Pago   \n",
              "\n",
              "                            Email  \n",
              "0  lucas.margarido@hsystem.com.br  \n",
              "1         email_nao@informado.com  \n",
              "2         email_nao@informado.com  \n",
              "3         dinojunior2@hotmail.com  \n",
              "4         email_nao@informado.com  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-71a26d17-52a6-482b-9a0c-b3f7f9693a55\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID_reserva</th>\n",
              "      <th>Canal</th>\n",
              "      <th>Titular</th>\n",
              "      <th>CPF/CNPJ/OUTRO</th>\n",
              "      <th>Telefone</th>\n",
              "      <th>Data da Reserva</th>\n",
              "      <th>Check-in</th>\n",
              "      <th>Check-out</th>\n",
              "      <th>Nº Adultos</th>\n",
              "      <th>Nº Crianças</th>\n",
              "      <th>Idade Crianças</th>\n",
              "      <th>Status da reserva</th>\n",
              "      <th>Tipo de quarto</th>\n",
              "      <th>Quantidade diarias</th>\n",
              "      <th>Valor</th>\n",
              "      <th>Comissão</th>\n",
              "      <th>Status do pagamento</th>\n",
              "      <th>Email</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>NaN</td>\n",
              "      <td>HBOOK</td>\n",
              "      <td>TESTE HSYSTEM</td>\n",
              "      <td>NaN</td>\n",
              "      <td>123</td>\n",
              "      <td>2022-02-11</td>\n",
              "      <td>2022-02-11</td>\n",
              "      <td>2022-02-12</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Cancelado</td>\n",
              "      <td>Twin Suite</td>\n",
              "      <td>1</td>\n",
              "      <td>250.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>lucas.margarido@hsystem.com.br</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2029.0</td>\n",
              "      <td>BOOKING</td>\n",
              "      <td>fabiola dirksen</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5547999780008</td>\n",
              "      <td>2025-08-30</td>\n",
              "      <td>2025-08-30</td>\n",
              "      <td>2025-08-31</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Novo</td>\n",
              "      <td>Apartamento com Cozinha</td>\n",
              "      <td>1</td>\n",
              "      <td>197.84</td>\n",
              "      <td>25.72</td>\n",
              "      <td>Pago</td>\n",
              "      <td>email_nao@informado.com</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2030.0</td>\n",
              "      <td>BOOKING</td>\n",
              "      <td>Rafael Ribeiro Gubitoso Ap 6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5555932815574</td>\n",
              "      <td>2025-08-29</td>\n",
              "      <td>2025-08-30</td>\n",
              "      <td>2025-09-01</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Novo</td>\n",
              "      <td>Apartamento sem Cozinha</td>\n",
              "      <td>2</td>\n",
              "      <td>395.68</td>\n",
              "      <td>51.44</td>\n",
              "      <td>pago</td>\n",
              "      <td>email_nao@informado.com</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2031.0</td>\n",
              "      <td>Direto</td>\n",
              "      <td>Dino Junior 10B</td>\n",
              "      <td>58443835915</td>\n",
              "      <td>4192364000</td>\n",
              "      <td>2025-08-29</td>\n",
              "      <td>2025-08-29</td>\n",
              "      <td>2025-09-01</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Novo</td>\n",
              "      <td>10B Apartamento com cozinha</td>\n",
              "      <td>3</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>Pago</td>\n",
              "      <td>dinojunior2@hotmail.com</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2028.0</td>\n",
              "      <td>Direto</td>\n",
              "      <td>Caique Peixoto</td>\n",
              "      <td>04316318160</td>\n",
              "      <td>556196818360</td>\n",
              "      <td>2025-08-27</td>\n",
              "      <td>2025-08-29</td>\n",
              "      <td>2025-08-30</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Novo</td>\n",
              "      <td>Ap 12 / 02 / 03/ 04</td>\n",
              "      <td>1</td>\n",
              "      <td>880.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>Pago</td>\n",
              "      <td>email_nao@informado.com</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-71a26d17-52a6-482b-9a0c-b3f7f9693a55')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-71a26d17-52a6-482b-9a0c-b3f7f9693a55 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-71a26d17-52a6-482b-9a0c-b3f7f9693a55');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-874e662f-26aa-446e-9a67-62dac2c2c394\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-874e662f-26aa-446e-9a67-62dac2c2c394')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-874e662f-26aa-446e-9a67-62dac2c2c394 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "Relatorio",
              "summary": "{\n  \"name\": \"Relatorio\",\n  \"rows\": 2234,\n  \"fields\": [\n    {\n      \"column\": \"ID_reserva\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 592.8282947261166,\n        \"min\": 1.0,\n        \"max\": 2054.0,\n        \"num_unique_values\": 2053,\n        \"samples\": [\n          1477.0,\n          768.0,\n          446.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Canal\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"HBOOK\",\n          \"BOOKING\",\n          \"EXPIDIA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Titular\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1924,\n        \"samples\": [\n          \"Priscila Fenner\",\n          \"Copette Leandro\",\n          \"Osni Paza\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CPF/CNPJ/OUTRO\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 16,\n        \"samples\": [\n          \"58443835915\",\n          \"04316318160\",\n          \"000000000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Telefone \",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1918,\n        \"samples\": [\n          \"+5511992711798\",\n          \"+43 660 3071995\",\n          \"+55 41 99164 0889\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Data da Reserva\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2022-01-19 00:00:00\",\n        \"max\": \"2025-09-08 00:00:00\",\n        \"num_unique_values\": 864,\n        \"samples\": [\n          \"2024-07-30 00:00:00\",\n          \"2022-06-13 00:00:00\",\n          \"2022-09-23 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Check-in\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2022-01-19 00:00:00\",\n        \"max\": \"2026-01-20 00:00:00\",\n        \"num_unique_values\": 776,\n        \"samples\": [\n          \"2023-04-01 00:00:00\",\n          \"2022-03-26 00:00:00\",\n          \"2024-02-16 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Check-out\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2022-01-20 00:00:00\",\n        \"max\": \"2026-01-28 00:00:00\",\n        \"num_unique_values\": 765,\n        \"samples\": [\n          \"2023-11-17 00:00:00\",\n          \"2024-02-08 00:00:00\",\n          \"2022-02-17 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"N\\u00ba Adultos\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2,\n          8,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"N\\u00ba Crian\\u00e7as\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Idade Crian\\u00e7as\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Status da reserva\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Cancelado\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tipo de quarto\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 50,\n        \"samples\": [\n          \"2 Bangal\\u00f4s com cozinha\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Quantidade diarias \",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 30,\n        \"num_unique_values\": 21,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Valor\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1154.0396477772804,\n        \"min\": 0.0,\n        \"max\": 11740.0,\n        \"num_unique_values\": 1267,\n        \"samples\": [\n          1073.04\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Comiss\\u00e3o\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 122.78640593993931,\n        \"min\": 0.0,\n        \"max\": 1049.57,\n        \"num_unique_values\": 829,\n        \"samples\": [\n          188.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Status do pagamento \",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Pago\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Email\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1951,\n        \"samples\": [\n          \"nzorzo.568844@guest.booking.com\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "9fp2XNuhD4jS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Relatorio.info()"
      ],
      "metadata": {
        "id": "IP48bOAgISA7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "312d95ce-28ec-4b54-8fd0-b311710231c8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 2234 entries, 0 to 2233\n",
            "Data columns (total 18 columns):\n",
            " #   Column                Non-Null Count  Dtype         \n",
            "---  ------                --------------  -----         \n",
            " 0   ID_reserva            2053 non-null   float64       \n",
            " 1   Canal                 2234 non-null   object        \n",
            " 2   Titular               2234 non-null   object        \n",
            " 3   CPF/CNPJ/OUTRO        18 non-null     object        \n",
            " 4   Telefone              2217 non-null   object        \n",
            " 5   Data da Reserva       2234 non-null   datetime64[ns]\n",
            " 6   Check-in              2234 non-null   datetime64[ns]\n",
            " 7   Check-out             2234 non-null   datetime64[ns]\n",
            " 8   Nº Adultos            2234 non-null   int64         \n",
            " 9   Nº Crianças           2234 non-null   int64         \n",
            " 10  Idade Crianças        1 non-null      float64       \n",
            " 11  Status da reserva     2231 non-null   object        \n",
            " 12  Tipo de quarto        2229 non-null   object        \n",
            " 13  Quantidade diarias    2234 non-null   int64         \n",
            " 14  Valor                 2234 non-null   float64       \n",
            " 15  Comissão              2234 non-null   float64       \n",
            " 16  Status do pagamento   50 non-null     object        \n",
            " 17  Email                 2116 non-null   object        \n",
            "dtypes: datetime64[ns](3), float64(4), int64(3), object(8)\n",
            "memory usage: 314.3+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Relatorio.describe()"
      ],
      "metadata": {
        "id": "5rAklSV3Kf2Q",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 442
        },
        "outputId": "eff40851-3f9e-45c2-ee71-956ba19694fb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        ID_reserva                Data da Reserva  \\\n",
              "count  2053.000000                           2234   \n",
              "mean   1027.019971  2023-06-30 18:54:28.039391232   \n",
              "min       1.000000            2022-01-19 00:00:00   \n",
              "25%     514.000000            2022-09-12 06:00:00   \n",
              "50%    1027.000000            2023-02-14 12:00:00   \n",
              "75%    1540.000000            2024-03-06 18:00:00   \n",
              "max    2054.000000            2025-09-08 00:00:00   \n",
              "std     592.828295                            NaN   \n",
              "\n",
              "                            Check-in                      Check-out  \\\n",
              "count                           2234                           2234   \n",
              "mean   2023-08-10 09:38:11.495076096  2023-08-13 18:24:10.313339136   \n",
              "min              2022-01-19 00:00:00            2022-01-20 00:00:00   \n",
              "25%              2022-11-25 00:00:00            2022-11-27 00:00:00   \n",
              "50%              2023-03-11 00:00:00            2023-03-15 00:00:00   \n",
              "75%              2024-04-04 00:00:00            2024-04-07 18:00:00   \n",
              "max              2026-01-20 00:00:00            2026-01-28 00:00:00   \n",
              "std                              NaN                            NaN   \n",
              "\n",
              "        Nº Adultos  Nº Crianças  Idade Crianças  Quantidade diarias   \\\n",
              "count  2234.000000  2234.000000             1.0          2234.000000   \n",
              "mean      1.846016     0.043420             0.0             3.365264   \n",
              "min       0.000000     0.000000             0.0             1.000000   \n",
              "25%       2.000000     0.000000             0.0             1.000000   \n",
              "50%       2.000000     0.000000             0.0             3.000000   \n",
              "75%       2.000000     0.000000             0.0             4.000000   \n",
              "max       8.000000     2.000000             0.0            30.000000   \n",
              "std       0.535790     0.224744             NaN             2.716979   \n",
              "\n",
              "              Valor     Comissão  \n",
              "count   2234.000000  2234.000000  \n",
              "mean    1103.333908    75.253008  \n",
              "min        0.000000     0.000000  \n",
              "25%      382.500000     0.000000  \n",
              "50%      720.000000    29.800000  \n",
              "75%     1434.160000    99.200000  \n",
              "max    11740.000000  1049.570000  \n",
              "std     1154.039648   122.786406  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-68b15040-9546-458d-bd6c-f27d85a4cbcd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID_reserva</th>\n",
              "      <th>Data da Reserva</th>\n",
              "      <th>Check-in</th>\n",
              "      <th>Check-out</th>\n",
              "      <th>Nº Adultos</th>\n",
              "      <th>Nº Crianças</th>\n",
              "      <th>Idade Crianças</th>\n",
              "      <th>Quantidade diarias</th>\n",
              "      <th>Valor</th>\n",
              "      <th>Comissão</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>2053.000000</td>\n",
              "      <td>2234</td>\n",
              "      <td>2234</td>\n",
              "      <td>2234</td>\n",
              "      <td>2234.000000</td>\n",
              "      <td>2234.000000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2234.000000</td>\n",
              "      <td>2234.000000</td>\n",
              "      <td>2234.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>1027.019971</td>\n",
              "      <td>2023-06-30 18:54:28.039391232</td>\n",
              "      <td>2023-08-10 09:38:11.495076096</td>\n",
              "      <td>2023-08-13 18:24:10.313339136</td>\n",
              "      <td>1.846016</td>\n",
              "      <td>0.043420</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.365264</td>\n",
              "      <td>1103.333908</td>\n",
              "      <td>75.253008</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>2022-01-19 00:00:00</td>\n",
              "      <td>2022-01-19 00:00:00</td>\n",
              "      <td>2022-01-20 00:00:00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>514.000000</td>\n",
              "      <td>2022-09-12 06:00:00</td>\n",
              "      <td>2022-11-25 00:00:00</td>\n",
              "      <td>2022-11-27 00:00:00</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>382.500000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>1027.000000</td>\n",
              "      <td>2023-02-14 12:00:00</td>\n",
              "      <td>2023-03-11 00:00:00</td>\n",
              "      <td>2023-03-15 00:00:00</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>720.000000</td>\n",
              "      <td>29.800000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>1540.000000</td>\n",
              "      <td>2024-03-06 18:00:00</td>\n",
              "      <td>2024-04-04 00:00:00</td>\n",
              "      <td>2024-04-07 18:00:00</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>1434.160000</td>\n",
              "      <td>99.200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>2054.000000</td>\n",
              "      <td>2025-09-08 00:00:00</td>\n",
              "      <td>2026-01-20 00:00:00</td>\n",
              "      <td>2026-01-28 00:00:00</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>30.000000</td>\n",
              "      <td>11740.000000</td>\n",
              "      <td>1049.570000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>592.828295</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.535790</td>\n",
              "      <td>0.224744</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.716979</td>\n",
              "      <td>1154.039648</td>\n",
              "      <td>122.786406</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-68b15040-9546-458d-bd6c-f27d85a4cbcd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-68b15040-9546-458d-bd6c-f27d85a4cbcd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-68b15040-9546-458d-bd6c-f27d85a4cbcd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-c73ab637-b9ba-45aa-9533-523f96bc7d5c\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c73ab637-b9ba-45aa-9533-523f96bc7d5c')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-c73ab637-b9ba-45aa-9533-523f96bc7d5c button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"Relatorio\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"ID_reserva\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 739.7866909571088,\n        \"min\": 1.0,\n        \"max\": 2054.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1027.0199707744764,\n          1540.0,\n          2053.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Data da Reserva\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1970-01-01 00:00:00.000002234\",\n        \"max\": \"2025-09-08 00:00:00\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"2234\",\n          \"2023-06-30 18:54:28.039391232\",\n          \"2024-03-06 18:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Check-in\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1970-01-01 00:00:00.000002234\",\n        \"max\": \"2026-01-20 00:00:00\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"2234\",\n          \"2023-08-10 09:38:11.495076096\",\n          \"2024-04-04 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Check-out\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1970-01-01 00:00:00.000002234\",\n        \"max\": \"2026-01-28 00:00:00\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"2234\",\n          \"2023-08-13 18:24:10.313339136\",\n          \"2024-04-07 18:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"N\\u00ba Adultos\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 789.0146124525108,\n        \"min\": 0.0,\n        \"max\": 2234.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2234.0,\n          1.846016114592659,\n          0.5357900710054501\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"N\\u00ba Crian\\u00e7as\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 789.7240150786487,\n        \"min\": 0.0,\n        \"max\": 2234.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.043419874664279316,\n          0.22474374336679945,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Idade Crian\\u00e7as\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3779644730092273,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Quantidade diarias \",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 787.6207139569052,\n        \"min\": 1.0,\n        \"max\": 2234.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          2234.0,\n          3.3652641002685764\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Valor\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3855.5923193916246,\n        \"min\": 0.0,\n        \"max\": 11740.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1103.33390778872,\n          1434.16\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Comiss\\u00e3o\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 801.2720992316473,\n        \"min\": 0.0,\n        \"max\": 2234.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          2234.0,\n          75.25300805729634\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Ver nome das Colunas da Base de Dados\n",
        "print(Relatorio.columns)"
      ],
      "metadata": {
        "id": "A3XgXsHcUBYb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "498742ba-cb2c-481a-d1d5-cb7b8b3f192a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['ID_reserva', 'Canal', 'Titular', 'CPF/CNPJ/OUTRO', 'Telefone ',\n",
            "       'Data da Reserva', 'Check-in', 'Check-out', 'Nº Adultos', 'Nº Crianças',\n",
            "       'Idade Crianças', 'Status da reserva', 'Tipo de quarto',\n",
            "       'Quantidade diarias ', 'Valor', 'Comissão', 'Status do pagamento ',\n",
            "       'Email'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Agregar uma columna mes no relatorio\n",
        "Relatorio['MÊS '] = Relatorio['Check-in'].dt.month"
      ],
      "metadata": {
        "id": "r6m2QOa9Aet1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Agregar uma coluna ano chamada ANO no Relatorio\n",
        "Relatorio['ANO '] = Relatorio['Check-in'].dt.year"
      ],
      "metadata": {
        "id": "wyv5trGKA7xV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Análises Temporais"
      ],
      "metadata": {
        "id": "gPJxLMwaYPCJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# TOTAL DE RECEITAS DO 19/01/20222 A 20/01/2026\n",
        "total_de_receitas = Relatorio['Valor'].sum()\n",
        "print(total_de_receitas)"
      ],
      "metadata": {
        "id": "Rbnw-XoxZWe7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "916f3bd9-c850-466d-c623-79f023bf50e6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2464847.95\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#TOTAL DE RECEITAS POR MES\n",
        "Receitas_por_mes_e_ano = Relatorio.groupby(['MÊS ', 'ANO '])['Valor'].sum()\n",
        "print(Receitas_por_mes_e_ano)"
      ],
      "metadata": {
        "id": "Dv0EV3mKPzWT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7c8015ee-f4e9-445c-ec7c-9a3bd5e821f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MÊS   ANO \n",
            "1     2022       354.80\n",
            "      2023    324014.53\n",
            "      2024    102769.33\n",
            "      2025    233198.61\n",
            "      2026     13140.00\n",
            "2     2022     15622.35\n",
            "      2023    180747.22\n",
            "      2024    116558.45\n",
            "      2025    165232.97\n",
            "3     2022     31186.70\n",
            "      2023     59517.47\n",
            "      2024    124161.52\n",
            "      2025    106316.33\n",
            "4     2022     45309.67\n",
            "      2023     32045.93\n",
            "      2024     47128.09\n",
            "      2025     31218.12\n",
            "5     2022     12368.41\n",
            "      2023     10314.75\n",
            "      2024      6796.21\n",
            "      2025      6649.62\n",
            "6     2022     15292.12\n",
            "      2023      5489.49\n",
            "      2024      6617.68\n",
            "7     2022     20227.73\n",
            "      2023      2906.75\n",
            "      2024      7048.16\n",
            "8     2022     28838.30\n",
            "      2023     11910.77\n",
            "      2024      8831.99\n",
            "      2025      7214.80\n",
            "9     2022     33658.91\n",
            "      2023     20385.46\n",
            "      2024     15735.88\n",
            "      2025      5917.47\n",
            "10    2022     34101.36\n",
            "      2023     11868.90\n",
            "      2024     29155.90\n",
            "      2025      4185.53\n",
            "11    2022     61937.47\n",
            "      2023     44231.82\n",
            "      2024     35107.85\n",
            "      2025      5100.00\n",
            "12    2022    152682.69\n",
            "      2023     86150.12\n",
            "      2024    106162.95\n",
            "      2025     39436.77\n",
            "Name: Valor, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Pega o índice do valor máximo\n",
        "maior_indice = Receitas_por_mes_e_ano.idxmax()  # retorna (mes, ano)\n",
        "mes, ano = maior_indice\n",
        "\n",
        "# Pega o valor da receita máxima\n",
        "valor_max = Receitas_por_mes_e_ano.loc[mes, ano]\n",
        "\n",
        "# Mostra de forma clara\n",
        "print(f\"A maior receita foi {valor_max} no mês {mes} do ano {ano}.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YLKBldYsBt2V",
        "outputId": "dc6c2519-2639-42af-f176-d942839e8045"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "A maior receita foi 324014.52999999997 no mês 1 do ano 2023.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Grafica receitas_por_mes\n",
        "#Receitas_por_mes_e_ano.plot(kind='bar', figsize=(8, 4))\n",
        "#plt.title('Receita Bruta por Mês')\n",
        "#plt.xlabel('Mês')\n",
        "#plt.ylabel('Receita Bruta')\n",
        "#plt.show()"
      ],
      "metadata": {
        "id": "eVgxFSANanmR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Gráfico de linea para recetias por mes e ano  ( foi criado para visualização interna mas o código seguinte vai mostrar no Streamlit )\n",
        "#Receitas_por_mes_e_ano= Receitas_por_mes_e_ano.unstack(level=1)  # level=1 é o ano\n",
        "#Receitas_por_mes_e_ano.plot(kind='line', figsize=(8, 4))\n",
        "#plt.title('Receita Bruta por Mês')\n",
        "#plt.xlabel('Mês')\n",
        "#plt.ylabel('Receita Bruta')\n",
        "#plt.xticks(range(1, 13))  # mostra todos os meses de 1 a 12\n",
        "#plt.legend(title='Ano')   # legenda mostrando os anos\n",
        "#plt.grid(True)\n",
        "#plt.show()\n",
        "#plt.show()\n",
        "\n"
      ],
      "metadata": {
        "id": "mm4la7bPDBmd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Transformando MultiIndex em colunas por ano\n",
        "Receitas_por_mes_e_ano = Receitas_por_mes_e_ano.unstack(level=1)  # level=1 é o ano\n",
        "\n",
        "# Criando a figura explicitamente\n",
        "fig, ax = plt.subplots(figsize=(8, 4))\n",
        "\n",
        "# Plotando usando ax (para Streamlit)\n",
        "Receitas_por_mes_e_ano.plot(kind='line', ax=ax, marker='o')\n",
        "\n",
        "# Configurando título, labels, legenda e grade\n",
        "ax.set_title('Receita Bruta por Mês')\n",
        "ax.set_xlabel('Mês')\n",
        "ax.set_ylabel('Receita Bruta')\n",
        "ax.set_xticks(range(1, 13))\n",
        "ax.legend(title='Ano')\n",
        "ax.grid(True)\n",
        "\n",
        "# Mostrando no Streamlit\n",
        "st.pyplot(fig)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UOHuC-NCOkDW",
        "outputId": "91269338-8e62-4d8f-e132-3eae8a8dbe5a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "2025-10-03 18:02:01.626 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-03 18:02:01.895 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-03 18:02:01.896 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-03 18:02:01.897 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DeltaGenerator()"
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# DIARIAS POR MES e ano\n",
        "diarias_por_mes_e_ano = Relatorio.groupby(['MÊS ', 'ANO '])['Quantidade diarias '].sum()\n",
        "print(diarias_por_mes_e_ano)"
      ],
      "metadata": {
        "id": "nbXfbslLYVuq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ad3d50a2-0edd-446d-b20d-f1da85a5005f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MÊS   ANO \n",
            "1     2022      1\n",
            "      2023    901\n",
            "      2024    250\n",
            "      2025    536\n",
            "      2026     29\n",
            "2     2022     61\n",
            "      2023    555\n",
            "      2024    249\n",
            "      2025    395\n",
            "3     2022    144\n",
            "      2023    225\n",
            "      2024    461\n",
            "      2025    285\n",
            "4     2022    189\n",
            "      2023    120\n",
            "      2024    188\n",
            "      2025     98\n",
            "5     2022     56\n",
            "      2023     47\n",
            "      2024     27\n",
            "      2025     24\n",
            "6     2022     63\n",
            "      2023     21\n",
            "      2024     26\n",
            "7     2022     93\n",
            "      2023     12\n",
            "      2024     27\n",
            "8     2022    146\n",
            "      2023     49\n",
            "      2024     39\n",
            "      2025     39\n",
            "9     2022    149\n",
            "      2023     87\n",
            "      2024     68\n",
            "      2025     35\n",
            "10    2022    127\n",
            "      2023     45\n",
            "      2024    120\n",
            "      2025     22\n",
            "11    2022    216\n",
            "      2023    158\n",
            "      2024    143\n",
            "      2025     30\n",
            "12    2022    459\n",
            "      2023    243\n",
            "      2024    189\n",
            "      2025     71\n",
            "Name: Quantidade diarias , dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Somente para visualização interna já que o código seguinte vai mostrar o gráfico direto no Streamlit\n",
        "# Gráfico de linea para quantidade de diarias  por mes e ano\n",
        "#diarias_por_mes_e_ano= diarias_por_mes_e_ano.unstack(level=1)  # level=1 é o ano\n",
        "#diarias_por_mes_e_ano.plot(kind='line', figsize=(8, 4))\n",
        "#plt.title('Diarias por mes e ano')\n",
        "#plt.xlabel('Mês')\n",
        "#plt.ylabel('diarias ')\n",
        "#plt.xticks(range(1, 13))  # mostra todos os meses de 1 a 12\n",
        "#plt.legend(title='Ano')   # legenda mostrando os anos\n",
        "#plt.grid(True)\n",
        "#plt.show()\n",
        "#plt.show()"
      ],
      "metadata": {
        "id": "QC4QD0qUE9nG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Transformando MultiIndex em colunas por ano\n",
        "diarias_por_mes_e_ano = diarias_por_mes_e_ano.unstack(level=1)  # level=1 é o ano\n",
        "\n",
        "# Criando a figura\n",
        "fig, ax = plt.subplots(figsize=(8, 4))\n",
        "\n",
        "# Plotando o gráfico (uma linha por coluna/ano)\n",
        "diarias_por_mes_e_ano.plot(kind='line', ax=ax, marker='o')\n",
        "\n",
        "# Configurações de título, labels e grade\n",
        "ax.set_title('Diárias por Mês e Ano')\n",
        "ax.set_xlabel('Mês')\n",
        "ax.set_ylabel('Diárias')\n",
        "ax.set_xticks(range(1, 13))  # mostra todos os meses\n",
        "ax.legend(title='Ano')       # legenda mostrando os anos\n",
        "ax.grid(True)\n",
        "\n",
        "# Exibindo no Streamlit\n",
        "st.pyplot(fig)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nMjxv1T4P-yv",
        "outputId": "3f4742c6-0693-4799-88c3-90fdf933baa7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-619814760.py:15: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n",
            "  ax.legend(title='Ano')       # legenda mostrando os anos\n",
            "2025-10-03 18:05:28.044 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-03 18:05:28.475 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-03 18:05:28.477 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-03 18:05:28.477 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DeltaGenerator()"
            ]
          },
          "metadata": {},
          "execution_count": 77
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# RECEITAS POR ACOMODAÇÃO\n",
        "Receitas_por_acomodacao = Relatorio.groupby( 'Tipo de quarto')['Valor'].sum()\n"
      ],
      "metadata": {
        "id": "VYVmODAW7ExX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Receitas_por_acomodacao = Receitas_por_acomodacao.sort_values(ascending=False)\n"
      ],
      "metadata": {
        "id": "mdIRtfDLcsLK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "JnyqKFDtHdQN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Ver nome das Colunas da Base de Dados\n",
        "print(Relatorio.columns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b7670254-71e6-4afa-8011-36cb8c0069b6",
        "id": "NJSDzKEUIDHW"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['ID_reserva', 'Canal', 'Titular', 'CPF/CNPJ/OUTRO', 'Telefone ',\n",
            "       'Data da Reserva', 'Check-in', 'Check-out', 'Nº Adultos', 'Nº Crianças',\n",
            "       'Idade Crianças', 'Status da reserva', 'Tipo de quarto',\n",
            "       'Quantidade diarias ', 'Valor', 'Comissão', 'Status do pagamento ',\n",
            "       'Email', 'MÊS ', 'ANO '],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "1iUynqAc9DNt"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Análise Diagnostica"
      ],
      "metadata": {
        "id": "I0pI5YWycyik"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 1  Boxplot\n",
        "plt.figure(figsize=(6, 4))\n",
        "sns.boxplot(x=Relatorio['Valor'])\n",
        "plt.title('Boxplot de RECEITA _BRUTA' )\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "UVs9mczwcdTw",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "outputId": "a6987e1c-3a00-41e3-b123-2c752e57377f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "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ksy0adN8lt96663G5XKZ7777zlk2depU4+fnZ1auXOmc9n755Zd9ths1apSRZP7f//t/zrLCwkIzYMAA43a7fU5Hq8gp9yFDhhi3223+85//OMv2799vateubXr27Oksq+gp9w4dOpj69eubzMxMZ9nixYuNJJ/Tp19++aWRZBITE322//TTT0tcXpT3lPuOHTvM4cOHzZ49e8xbb71lgoODzWWXXWaOHz/u075x48YlPk6SzPTp040xxmzcuNFIMvfff3+59tUYU2qfksy7777rtDufU+6TJk0yDRs2NIWFhcaY/9Vzw4YN5Z5nWXr16lXi/K+66iqza9cun7be5/vSpUvN4cOHzb59+8z7779vLrvsMuPxeMy+fft82lfVKff333/fSDJpaWnGGGOys7NNUFCQ+fOf/1yhfceljYviUKLXXnvNuQjq4MGDeuedd/TrX/9atWvX1i9/+UtJ0sKFC+Xv7+8c9Xo99NBDev/997Vo0SJNmjRJ0pmruP/9739r1KhROnbsmHr16lVsOy/vNtKZq64nTZqkTz75REuXLtXtt99erH1BQYEWL16sIUOGqFmzZs7y+vXr64477tCbb76p7OxshYWFVagGBw4cUGpqqh599FGFh4c7y2+44Qa1bt1ax48fd5YlJSUpPDxcN9xwg44cOeIs79Spk0JDQ7VixQrdcccdPzlmy5YtfX5v166dZs2aVewiLkmKi4vTtGnTii1v0aKFJCk7O1uSKnxh1eDBg30eg7Pncr5Onz6t9957T6NGjZLL5ZIk/fznP1dUVJQSExPVoUOH8x5DOnM1+ptvvumMuWPHDj3//PPq37+/vvzyS+dCNK++ffsW2/6dd97R5ZdfXinz+SmJiYnq3LmzrrjiCklnHrMBAwYoMTFRkydPviBzwMWPQEeJunTpos6dOzu/Dx8+XB07dtSkSZM0cOBAud1uff/994qNjS0WGN5T2N9//72zzO1266233tI111yjoKAgzZo1y/mDfjY/Pz+fUJb+d3V1abeaHT58WCdOnCgWht65FBYWat++fWrTpk35dv7/eOfvDciztWzZUt98843ze1pamrKyshQVFVViX4cOHSrXmPPnz1dYWJgOHz6sv/zlL9q9e7eCg4NLbFuvXr1iQXQ27wuYnJycco3tdfnll5fZ7/lYvHixDh8+rC5duui7775zlvfp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zg2BDgCABQh0AAAsQKADAGCBGhPor732mpo0aaKgoCDFxcVp7dq11T2lKjF9+nRdc801ql27tqKiojRkyBDt2LHDp82pU6c0ceJE1a1bV6GhofrVr36lgwcP+rTZu3evBgwYoJCQEEVFRWnKlCk6ffq0T5vPP/9cP/vZz+TxeHTFFVcoISGhqnevUj377LNyuVyaPHmys+xSr80PP/ygkSNHqm7dugoODla7du20bt06Z70xRk8++aTq16+v4OBg9e3bV2lpaT59HD16VCNGjFBYWJgiIiI0duxYHTt2zKfNpk2bdN111ykoKEgNGzbU888/f0H273wUFBToiSeeUNOmTRUcHKzmzZvr97//vc9nZV9q9Vm5cqVuueUWxcbGyuVy6cMPP/RZfyHrkZSUpFatWikoKEjt2rXTwoULK31/K6qs+uTn5+uRRx5Ru3btVKtWLcXGxuquu+7S/v37ffqoUfUxNcDcuXON2+02b731ltmyZYv5zW9+YyIiIszBgwere2qVrl+/fmbWrFlm8+bNJjU11dx8882mUaNG5tixY06be++91zRs2NAsW7bMrFu3znTt2tV0797dWX/69GnTtm1b07dvX7NhwwazcOFCU69ePTN16lSnza5du0xISIh58MEHzdatW82rr75q/P39zaeffnpB9/dcrV271jRp0sS0b9/e3H///c7yS7k2R48eNY0bNzajR482a9asMbt27TKfffaZ+e6775w2zz77rAkPDzcffvih2bhxoxk0aJBp2rSpOXnypNPmpptuMldffbVJSUkxX375pbniiivM8OHDnfVZWVkmOjrajBgxwmzevNm8++67Jjg42Pztb3+7oPtbUX/4wx9M3bp1zb///W+ze/duk5SUZEJDQ80rr7zitLnU6rNw4ULz2GOPmX/9619Gkvnggw981l+oeqxevdr4+/ub559/3mzdutU8/vjjJjAw0Hz77bdVXoOylFWfzMxM07dvX/Pee++Z7du3m+TkZNOlSxfTqVMnnz5qUn1qRKB36dLFTJw40fm9oKDAxMbGmunTp1fjrC6MQ4cOGUnmiy++MMaceRIFBgaapKQkp822bduMJJOcnGyMOfMk9PPzM+np6U6bGTNmmLCwMJObm2uMMebhhx82bdq08Rlr2LBhpl+/flW9S+ctJyfHtGjRwixZssT06tXLCfRLvTaP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4PwR6AAAWIBABwDAAgQ6AAAWINABALAAgQ4AgAUIdAAALECgAwBgAQIdsFTv3r01efLk6p4GgAuEQAdqoFtuuUU33XRTieu+/PJLuVwubdq06QLPCkBNRqADNdDYsWO1ZMkS/fe//y22btasWercubPat29fpXMoKChwvqkMQM1HoAM10MCBA3XZZZcpISHBZ/mxY8eUlJSkIUOGaPjw4WrQoIFCQkLUrl07vfvuu2X2mZGRobvuukuRkZEKCQlR//79lZaW5qxPSEhQRESEPvroI7Vu3Voej8f5rnUANR+BDtRAAQEBuuuuu5SQkKCzvz8pKSlJBQUFGjlypDp16qRPPvlEmzdv1rhx43TnnXdq7dq1pfY5evRorVu3Th999JGSk5NljNHNN9/s8z3NJ06c0HPPPae///3v2rJli6Kioqp0PwFUHr5tDaihtm/frquuukorVqxQ7969JUk9e/ZU48aNNXv27GLtBw4cqFatWunFF1+UdOaiuA4dOujll19WWlqarrzySq1evVrdu3eXJP34449q2LCh3n77bQ0dOlQJCQkaM2aMUlNTdfXVV1+w/QRQOThCB2qoVq1aqXv37nrrrbckSd99952+/PJLjR07VgUFBfr973+vdu3aqU6dOgoNDdVnn31W6inybdu2KSAgQHFxcc6yunXrqmXLltq2bZuzzO12V/l78wCqBoEO1GBjx47V/PnzlZOTo1mzZql58+bq1auXXnjhBb3yyit65JFHtGLFCqWmpqpfv37Ky8s7r/GCg4PlcrkqafYALiQCHajBbrvtNvn5+WnOnDn65z//qbvvvlsul0urV6/W4MGDNXLkSF199dVq1qyZdu7cWWo/V111lU6fPq01a9Y4y3788Uft2LFDrVu3vhC7AqCKEehADRYaGqphw4Zp6tSpOnDggEaPHi1JatGihZYsWaKvvvpK27Zt0z333KODBw+W2k+LFi00ePBg/eY3v9GqVau0ceNGjRw5Ug0aNNDgwYMv0N4AqEoEOlDDjR07VhkZGerXr59iY2MlSY8//rh+9rOfqV+/furdu7diYmI0ZMiQMvuZNWuWOnXqpIEDB6pbt24yxmjhwoUKDAy8AHsBoKpxlTsAABbgCB0AAAsQ6AAAWIBABwDAAgQ6AAAWINABALAAgQ4AgAUIdAAALECgAwBgAQIdAAALEOgAAFiAQAcAwAL/HxmnLN1FsGvCAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 1  Boxplot\n",
        "plt.figure(figsize=(6, 4))\n",
        "sns.boxplot(x=Relatorio['Quantidade diarias '])\n",
        "plt.title('Boxplot de Quantidade de Diarias ' )\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "Z-unUcutd1eg",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "outputId": "4f6c0e0d-a7b9-42bf-87b7-7c90316ce08a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Correlação entre receita bruta e quantidade de diárias\n",
        "corr_receita_diarias = Relatorio['Valor'].corr(Relatorio['Quantidade diarias '])\n",
        "print('Correlação entre receita bruta e quantidade de diárias:', corr_receita_diarias)"
      ],
      "metadata": {
        "id": "3aF1vrrdPk6Z",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2bbb8af6-1e28-4f4f-99b7-68f79a31113c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correlação entre receita bruta e quantidade de diárias: 0.8505450619401645\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Grafico de Correlação interno , código seguinte gerado para view no Streamlit\n",
        "#plt.figure(figsize=(8,6))\n",
        "\n",
        "# Scatter plot com linha de tendência\n",
        "#sns.regplot(x='Quantidade diarias ', y='Valor', data=Relatorio,\n",
        "          #  ci=None, scatter_kws={'color':'blue'}, line_kws={'color':'red'})\n",
        "\n",
        "#plt.title('Correlação entre Diárias e Receita Bruta')\n",
        "#plt.xlabel('Número de Diárias')\n",
        "#plt.ylabel('Receita Bruta')\n",
        "#plt.grid(True)\n",
        "#plt.show()"
      ],
      "metadata": {
        "id": "2rxh0weuMGlu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Criando a figura\n",
        "fig, ax = plt.subplots(figsize=(8,6))\n",
        "\n",
        "# Scatter plot com linha de tendência\n",
        "sns.regplot(x='Quantidade diarias ', y='Valor', data=Relatorio,\n",
        "            ci=None, scatter_kws={'color':'blue'}, line_kws={'color':'red'}, ax=ax)\n",
        "\n",
        "# Configurações de título e labels\n",
        "ax.set_title('Correlação entre Diárias e Receita Bruta')\n",
        "ax.set_xlabel('Número de Diárias')\n",
        "ax.set_ylabel('Receita Bruta')\n",
        "ax.grid(True)\n",
        "\n",
        "# Exibindo no Streamlit\n",
        "st.pyplot(fig)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xU7DKCMPQkhW",
        "outputId": "8c6135c5-15d2-431f-d581-9724cb53400f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "2025-10-03 18:07:55.420 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-03 18:07:55.672 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-03 18:07:55.673 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-03 18:07:55.674 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DeltaGenerator()"
            ]
          },
          "metadata": {},
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "receita_tempo = Relatorio.groupby('MÊS ')['Valor'].sum()\n",
        "display(receita_tempo)"
      ],
      "metadata": {
        "id": "CKpFBUU7HJzk",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 492
        },
        "outputId": "5a899f5e-dfd7-41a3-dbba-a100577c1240"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "MÊS \n",
              "1     673477.27\n",
              "2     478160.99\n",
              "3     321182.02\n",
              "4     155701.81\n",
              "5      36128.99\n",
              "6      27399.29\n",
              "7      30182.64\n",
              "8      56795.86\n",
              "9      75697.72\n",
              "10     79311.69\n",
              "11    146377.14\n",
              "12    384432.53\n",
              "Name: Valor, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Valor</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MÊS</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>673477.27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>478160.99</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>321182.02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>155701.81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>36128.99</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>27399.29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>30182.64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>56795.86</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>75697.72</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>79311.69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>146377.14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>384432.53</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: gerar grafico de linea para receita_tempo com media movel\n",
        "# Calculate the moving average of the revenue\n",
        "#receita_tempo_media_movel = receita_tempo.rolling(window=3).mean()\n",
        "\n",
        "# Create a line plot of the revenue and the moving average\n",
        "#plt.figure(figsize=(10, 6))\n",
        "#plt.plot(receita_tempo, label='Valor')\n",
        "#plt.plot(receita_tempo_media_movel, label='Média Móvel')\n",
        "\n",
        "# Add labels and title\n",
        "#plt.xlabel('Data')\n",
        "#plt.ylabel('Receita Bruta')\n",
        "#plt.title('Receita Bruta ao Longo do Tempo com Média Móvel')\n",
        "\n",
        "# Add legend and show plot\n",
        "#plt.legend()\n",
        "#plt.show()"
      ],
      "metadata": {
        "id": "eZAmL1VaJ41X",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 565
        },
        "outputId": "cda3336f-4a81-4640-de0a-faef80109e17"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Vamos criar um modelo de\n",
        " #regressão linear para prever\n",
        "#a receita bruta\n",
        " #com base na quantidade de diárias."
      ],
      "metadata": {
        "id": "XMa1K8vrcGZj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# IMPORTAR BIBLIOTECA\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "i7dIwLkick62"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Selecionar variáveis independentes (X) e dependente (y)\n",
        "X = Relatorio[['Quantidade diarias ']]\n",
        "y = Relatorio['Valor']"
      ],
      "metadata": {
        "id": "Za7gOyb6j1WK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Dividir os dados em treino e teste\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "VFS6tIlflFPT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Treinar o modelo\n",
        "modelo = LinearRegression()\n",
        "modelo.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "FLE6c2islQoJ",
        "outputId": "c0824457-52a0-40fe-8f16-b112aae7828d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LinearRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 100
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Fazer previsões\n",
        "previsoes = modelo.predict(X_test)\n",
        "print(previsoes)"
      ],
      "metadata": {
        "id": "6DAooiV4lYzL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bc2c513d-9d82-4bf0-8980-34c0c0c2dfaf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 608.37461581  248.69832274 2047.07978807 1687.40349501  248.69832274\n",
            "  608.37461581 3126.10866727  968.05090888  608.37461581 1327.72720194\n",
            "  248.69832274  608.37461581 2047.07978807  248.69832274 1687.40349501\n",
            "  248.69832274  968.05090888 3126.10866727  608.37461581 1327.72720194\n",
            "  248.69832274  248.69832274  968.05090888 1687.40349501  608.37461581\n",
            "  968.05090888 1327.72720194  248.69832274 1687.40349501  968.05090888\n",
            " 2406.75608114 1327.72720194  608.37461581  248.69832274 2406.75608114\n",
            "  608.37461581  608.37461581  248.69832274  248.69832274 1327.72720194\n",
            " 1687.40349501 1327.72720194 2047.07978807  608.37461581 1687.40349501\n",
            "  608.37461581  608.37461581  248.69832274 1687.40349501 5284.16642567\n",
            " 2406.75608114 1687.40349501  248.69832274  248.69832274  608.37461581\n",
            " 2047.07978807  248.69832274 3126.10866727  968.05090888  968.05090888\n",
            " 3845.46125341  248.69832274  608.37461581  248.69832274  968.05090888\n",
            "  248.69832274  968.05090888  608.37461581  248.69832274  968.05090888\n",
            "  248.69832274  968.05090888 1687.40349501 2766.43237421  248.69832274\n",
            "  968.05090888  248.69832274  248.69832274  608.37461581 4205.13754647\n",
            "  968.05090888  248.69832274 1327.72720194 2406.75608114  968.05090888\n",
            "  248.69832274 1687.40349501  608.37461581  968.05090888  608.37461581\n",
            "  608.37461581  248.69832274  248.69832274 2047.07978807  968.05090888\n",
            "  968.05090888  608.37461581  248.69832274  608.37461581  248.69832274\n",
            " 1327.72720194  608.37461581  608.37461581  608.37461581 1327.72720194\n",
            "  248.69832274  968.05090888  608.37461581  608.37461581 5284.16642567\n",
            "  608.37461581  968.05090888  248.69832274  248.69832274  248.69832274\n",
            " 1327.72720194  248.69832274  248.69832274 1327.72720194  248.69832274\n",
            "  968.05090888  248.69832274 2406.75608114 1687.40349501  248.69832274\n",
            " 3845.46125341 1687.40349501 1327.72720194  608.37461581 2406.75608114\n",
            "  608.37461581 1327.72720194  608.37461581  968.05090888 1687.40349501\n",
            "  248.69832274  248.69832274 1687.40349501  608.37461581  608.37461581\n",
            " 2406.75608114 2406.75608114  248.69832274  248.69832274  968.05090888\n",
            "  248.69832274 1687.40349501 2766.43237421  608.37461581  608.37461581\n",
            " 1327.72720194 1327.72720194  608.37461581  608.37461581  968.05090888\n",
            "  968.05090888  248.69832274 1327.72720194  248.69832274 2406.75608114\n",
            "  248.69832274 1327.72720194 1327.72720194  608.37461581 1687.40349501\n",
            " 1327.72720194  248.69832274  608.37461581 3845.46125341  248.69832274\n",
            "  608.37461581  248.69832274  248.69832274 1327.72720194  608.37461581\n",
            "  968.05090888 2047.07978807 2047.07978807  248.69832274  248.69832274\n",
            " 2047.07978807  968.05090888  248.69832274  608.37461581 2406.75608114\n",
            "  248.69832274 1327.72720194  608.37461581 1327.72720194 2047.07978807\n",
            " 2047.07978807 1327.72720194  608.37461581  968.05090888  608.37461581\n",
            "  608.37461581 4924.49013261  608.37461581  968.05090888 1687.40349501\n",
            " 2047.07978807 1327.72720194  248.69832274  608.37461581 1327.72720194\n",
            "  968.05090888  608.37461581 2406.75608114 1687.40349501 1327.72720194\n",
            " 1687.40349501  608.37461581  968.05090888  608.37461581 2047.07978807\n",
            "  248.69832274  608.37461581  608.37461581 5284.16642567 1327.72720194\n",
            "  248.69832274  608.37461581  608.37461581  608.37461581  248.69832274\n",
            "  968.05090888  968.05090888 2406.75608114 1327.72720194 2406.75608114\n",
            "  968.05090888  608.37461581 2406.75608114 1327.72720194  968.05090888\n",
            " 4205.13754647  968.05090888  608.37461581  968.05090888  248.69832274\n",
            "  608.37461581  608.37461581  248.69832274  608.37461581  608.37461581\n",
            "  248.69832274  608.37461581 1327.72720194  968.05090888  248.69832274\n",
            " 2047.07978807  608.37461581 2047.07978807  968.05090888  608.37461581\n",
            "  608.37461581  248.69832274  968.05090888 1687.40349501 2766.43237421\n",
            "  968.05090888 1327.72720194  608.37461581  248.69832274  968.05090888\n",
            " 5643.84271874  608.37461581 2047.07978807 1327.72720194  968.05090888\n",
            " 4924.49013261  608.37461581  608.37461581 2047.07978807 1327.72720194\n",
            "  968.05090888 1687.40349501 3126.10866727 1327.72720194  248.69832274\n",
            "  608.37461581 1327.72720194 2047.07978807 2047.07978807 2406.75608114\n",
            " 2406.75608114  608.37461581  968.05090888  248.69832274  608.37461581\n",
            "  608.37461581 3485.78496034  248.69832274  248.69832274  608.37461581\n",
            " 5284.16642567  608.37461581  248.69832274  608.37461581  248.69832274\n",
            "  968.05090888  968.05090888  968.05090888 2406.75608114  968.05090888\n",
            " 2047.07978807 1327.72720194 2406.75608114  968.05090888  608.37461581\n",
            "  968.05090888  968.05090888  248.69832274 2047.07978807 2047.07978807\n",
            " 2047.07978807  968.05090888  608.37461581  248.69832274  608.37461581\n",
            " 2047.07978807  968.05090888 1687.40349501  608.37461581  248.69832274\n",
            "  248.69832274  608.37461581  608.37461581 1687.40349501  248.69832274\n",
            "  608.37461581 1687.40349501 1327.72720194  608.37461581  248.69832274\n",
            "  248.69832274 1687.40349501  248.69832274  248.69832274 1327.72720194\n",
            " 2047.07978807  248.69832274  968.05090888 1327.72720194 1327.72720194\n",
            " 2766.43237421 1327.72720194  248.69832274  248.69832274  608.37461581\n",
            "  608.37461581 2406.75608114  608.37461581  608.37461581  968.05090888\n",
            " 1687.40349501 2047.07978807 1687.40349501  968.05090888  248.69832274\n",
            " 1327.72720194 1327.72720194  248.69832274  248.69832274  968.05090888\n",
            "  248.69832274  968.05090888  608.37461581 1687.40349501  248.69832274\n",
            "  248.69832274  248.69832274  608.37461581  248.69832274  968.05090888\n",
            " 1327.72720194  608.37461581  608.37461581 1687.40349501 2406.75608114\n",
            "  608.37461581 1687.40349501 2047.07978807 3126.10866727  248.69832274\n",
            "  608.37461581 3485.78496034 1687.40349501 1327.72720194 1327.72720194\n",
            "  608.37461581  248.69832274  968.05090888  968.05090888  968.05090888\n",
            "  968.05090888  248.69832274 1687.40349501  968.05090888  968.05090888\n",
            " 1327.72720194  248.69832274 1687.40349501  248.69832274  968.05090888\n",
            "  968.05090888  608.37461581 1687.40349501  248.69832274  608.37461581\n",
            "  968.05090888 2766.43237421  608.37461581 1327.72720194 2406.75608114\n",
            "  248.69832274  968.05090888  608.37461581  968.05090888 1687.40349501\n",
            "  248.69832274 1687.40349501  968.05090888  248.69832274  248.69832274\n",
            " 2406.75608114 1687.40349501  968.05090888  248.69832274  968.05090888\n",
            " 3126.10866727  248.69832274 1687.40349501 1687.40349501  248.69832274\n",
            " 2047.07978807 4564.81383954 2406.75608114 1327.72720194 2047.07978807\n",
            "  248.69832274  248.69832274  248.69832274 1687.40349501  968.05090888\n",
            " 2047.07978807 4205.13754647]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Avaliar o modelo\n",
        "mse = mean_squared_error(y_test, previsoes)\n",
        "rmse = np.sqrt(mse)\n",
        "print(f'Mean Squared Error: {mse}')\n",
        "print(f'Root Mean Squared Error: {rmse}')"
      ],
      "metadata": {
        "id": "sZFMITrel0Hp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6ebcf9ea-bb54-47ac-c756-a1314479906e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Squared Error: 414425.0494501143\n",
            "Root Mean Squared Error: 643.7585334969272\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Coeficiente e intercepto do modelo\n",
        "coef = modelo.coef_\n",
        "intercepto = modelo.intercept_\n",
        "print(f'Coeficiente: {coef}')\n",
        "print(f'Intercepto: {intercepto}')"
      ],
      "metadata": {
        "id": "MH87My2zmPkr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b90a9998-385d-4fa5-b42e-9a10508d4431"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Coeficiente: [359.67629307]\n",
            "Intercepto: -110.97797032417225\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "RoEIN8BWnCHx"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
