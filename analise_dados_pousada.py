# -*- coding: utf-8 -*-
"""Analise_dados_Pousada

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tZcellBGawHCtdQ8L8UFMCf_ULHnqNAC
"""

pip install streamlit

# Commented out IPython magic to ensure Python compatibility.
# Importando bibliotecas
import pandas as pd
import numpy as np
# %matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

import streamlit as st

"""Analise Descritiva"""

# Importar tabela para Analise de dados
Relatorio = pd.read_excel('/content/drive/MyDrive/BD_Reservas.xlsx')
# Ver a tabela
Relatorio.head()

Relatorio.info()

Relatorio.describe()

# Ver nome das Colunas da Base de Dados
print(Relatorio.columns)

# Agregar uma columna mes no relatorio
Relatorio['MÊS '] = Relatorio['Check-in'].dt.month

# Agregar uma coluna ano chamada ANO no Relatorio
Relatorio['ANO '] = Relatorio['Check-in'].dt.year

"""Análises Temporais"""

# TOTAL DE RECEITAS DO 19/01/20222 A 20/01/2026
total_de_receitas = Relatorio['Valor'].sum()
print(total_de_receitas)

#TOTAL DE RECEITAS POR MES
Receitas_por_mes_e_ano = Relatorio.groupby(['MÊS ', 'ANO '])['Valor'].sum()
print(Receitas_por_mes_e_ano)

# Pega o índice do valor máximo
maior_indice = Receitas_por_mes_e_ano.idxmax()  # retorna (mes, ano)
mes, ano = maior_indice

# Pega o valor da receita máxima
valor_max = Receitas_por_mes_e_ano.loc[mes, ano]

# Mostra de forma clara
print(f"A maior receita foi {valor_max} no mês {mes} do ano {ano}.")

# Grafica receitas_por_mes
#Receitas_por_mes_e_ano.plot(kind='bar', figsize=(8, 4))
#plt.title('Receita Bruta por Mês')
#plt.xlabel('Mês')
#plt.ylabel('Receita Bruta')
#plt.show()

# Gráfico de linea para recetias por mes e ano  ( foi criado para visualização interna mas o código seguinte vai mostrar no Streamlit )
#Receitas_por_mes_e_ano= Receitas_por_mes_e_ano.unstack(level=1)  # level=1 é o ano
#Receitas_por_mes_e_ano.plot(kind='line', figsize=(8, 4))
#plt.title('Receita Bruta por Mês')
#plt.xlabel('Mês')
#plt.ylabel('Receita Bruta')
#plt.xticks(range(1, 13))  # mostra todos os meses de 1 a 12
#plt.legend(title='Ano')   # legenda mostrando os anos
#plt.grid(True)
#plt.show()
#plt.show()

# Transformando MultiIndex em colunas por ano
Receitas_por_mes_e_ano = Receitas_por_mes_e_ano.unstack(level=1)  # level=1 é o ano

# Criando a figura explicitamente
fig, ax = plt.subplots(figsize=(8, 4))

# Plotando usando ax (para Streamlit)
Receitas_por_mes_e_ano.plot(kind='line', ax=ax, marker='o')

# Configurando título, labels, legenda e grade
ax.set_title('Receita Bruta por Mês')
ax.set_xlabel('Mês')
ax.set_ylabel('Receita Bruta')
ax.set_xticks(range(1, 13))
ax.legend(title='Ano')
ax.grid(True)

# Mostrando no Streamlit
st.pyplot(fig)

# DIARIAS POR MES e ano
diarias_por_mes_e_ano = Relatorio.groupby(['MÊS ', 'ANO '])['Quantidade diarias '].sum()
print(diarias_por_mes_e_ano)

# Somente para visualização interna já que o código seguinte vai mostrar o gráfico direto no Streamlit
# Gráfico de linea para quantidade de diarias  por mes e ano
#diarias_por_mes_e_ano= diarias_por_mes_e_ano.unstack(level=1)  # level=1 é o ano
#diarias_por_mes_e_ano.plot(kind='line', figsize=(8, 4))
#plt.title('Diarias por mes e ano')
#plt.xlabel('Mês')
#plt.ylabel('diarias ')
#plt.xticks(range(1, 13))  # mostra todos os meses de 1 a 12
#plt.legend(title='Ano')   # legenda mostrando os anos
#plt.grid(True)
#plt.show()
#plt.show()

# Transformando MultiIndex em colunas por ano
diarias_por_mes_e_ano = diarias_por_mes_e_ano.unstack(level=1)  # level=1 é o ano

# Criando a figura
fig, ax = plt.subplots(figsize=(8, 4))

# Plotando o gráfico (uma linha por coluna/ano)
diarias_por_mes_e_ano.plot(kind='line', ax=ax, marker='o')

# Configurações de título, labels e grade
ax.set_title('Diárias por Mês e Ano')
ax.set_xlabel('Mês')
ax.set_ylabel('Diárias')
ax.set_xticks(range(1, 13))  # mostra todos os meses
ax.legend(title='Ano')       # legenda mostrando os anos
ax.grid(True)

# Exibindo no Streamlit
st.pyplot(fig)

# RECEITAS POR ACOMODAÇÃO
Receitas_por_acomodacao = Relatorio.groupby( 'Tipo de quarto')['Valor'].sum()

Receitas_por_acomodacao = Receitas_por_acomodacao.sort_values(ascending=False)

# Ver nome das Colunas da Base de Dados
print(Relatorio.columns)

"""Análise Diagnostica"""

# 1  Boxplot
plt.figure(figsize=(6, 4))
sns.boxplot(x=Relatorio['Valor'])
plt.title('Boxplot de RECEITA _BRUTA' )
plt.show()

# 1  Boxplot
plt.figure(figsize=(6, 4))
sns.boxplot(x=Relatorio['Quantidade diarias '])
plt.title('Boxplot de Quantidade de Diarias ' )
plt.show()

# Correlação entre receita bruta e quantidade de diárias
corr_receita_diarias = Relatorio['Valor'].corr(Relatorio['Quantidade diarias '])
print('Correlação entre receita bruta e quantidade de diárias:', corr_receita_diarias)

# Grafico de Correlação interno , código seguinte gerado para view no Streamlit
#plt.figure(figsize=(8,6))

# Scatter plot com linha de tendência
#sns.regplot(x='Quantidade diarias ', y='Valor', data=Relatorio,
          #  ci=None, scatter_kws={'color':'blue'}, line_kws={'color':'red'})

#plt.title('Correlação entre Diárias e Receita Bruta')
#plt.xlabel('Número de Diárias')
#plt.ylabel('Receita Bruta')
#plt.grid(True)
#plt.show()

# Criando a figura
fig, ax = plt.subplots(figsize=(8,6))

# Scatter plot com linha de tendência
sns.regplot(x='Quantidade diarias ', y='Valor', data=Relatorio,
            ci=None, scatter_kws={'color':'blue'}, line_kws={'color':'red'}, ax=ax)

# Configurações de título e labels
ax.set_title('Correlação entre Diárias e Receita Bruta')
ax.set_xlabel('Número de Diárias')
ax.set_ylabel('Receita Bruta')
ax.grid(True)

# Exibindo no Streamlit
st.pyplot(fig)

receita_tempo = Relatorio.groupby('MÊS ')['Valor'].sum()
display(receita_tempo)

# prompt: gerar grafico de linea para receita_tempo com media movel
# Calculate the moving average of the revenue
#receita_tempo_media_movel = receita_tempo.rolling(window=3).mean()

# Create a line plot of the revenue and the moving average
#plt.figure(figsize=(10, 6))
#plt.plot(receita_tempo, label='Valor')
#plt.plot(receita_tempo_media_movel, label='Média Móvel')

# Add labels and title
#plt.xlabel('Data')
#plt.ylabel('Receita Bruta')
#plt.title('Receita Bruta ao Longo do Tempo com Média Móvel')

# Add legend and show plot
#plt.legend()
#plt.show()

# Vamos criar um modelo de
 #regressão linear para prever
#a receita bruta
 #com base na quantidade de diárias.

# IMPORTAR BIBLIOTECA
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import numpy as np

# Selecionar variáveis independentes (X) e dependente (y)
X = Relatorio[['Quantidade diarias ']]
y = Relatorio['Valor']

# Dividir os dados em treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Treinar o modelo
modelo = LinearRegression()
modelo.fit(X_train, y_train)

# Fazer previsões
previsoes = modelo.predict(X_test)
print(previsoes)

# Avaliar o modelo
mse = mean_squared_error(y_test, previsoes)
rmse = np.sqrt(mse)
print(f'Mean Squared Error: {mse}')
print(f'Root Mean Squared Error: {rmse}')

# Coeficiente e intercepto do modelo
coef = modelo.coef_
intercepto = modelo.intercept_
print(f'Coeficiente: {coef}')
print(f'Intercepto: {intercepto}')

